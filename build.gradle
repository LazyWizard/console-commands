import java.nio.file.Paths

// TODO: Add Example Commands mod as a sub-project and include its zip in the buildMod task

apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = 1.7

buildscript {
    ext.kotlin_version = '1.1.61'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenCentral()
}

ext {
    Properties localProps = new Properties()
    localProps.load(new FileInputStream(file('local.properties')))
    ext.gameDir = localProps['starsectorInstallDir']
    ext.lazylib = localProps['lazylibJar']
    ext.outputPath = localProps['outputPath']
}

//  Please note: any dependencies marked 'compile' will be included in the jar!
dependencies {
    compile('org.jetbrains.kotlin:kotlin-stdlib') { transitive = false }
    compile('org.jetbrains.kotlin:kotlin-stdlib-jre7') { transitive = false }
    compileOnly fileTree(dir: gameDir, include: '*.jar', exclude: '*_obf.jar')
    compileOnly files(lazylib)
}

jar {
    //from sourceSets.main.java
    from sourceSets.main.kotlin
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    destinationDir file(Paths.get(outputPath, 'jars/'))
    archiveName 'lw_Console.jar'
}

defaultTasks 'buildMod'

task printProps() {
    doLast {
        println 'Game directory: ' + gameDir
        println 'LazyLib jar: ' + lazylib
        println 'Output path: ' + outputPath
    }
}

task copyModFiles(type: Copy) {
    from 'src/main/mod'
    into outputPath
}

task buildMod(dependsOn: [jar, copyModFiles]) {
    doLast {
        println 'Mod folder created at \"' + file(outputPath).absolutePath + '\"'
    }
}

// TODO: Zip up buildMod results and include version number in filename
task zipMod(dependsOn: buildMod/*, type: Zip*/) {
    /*from outputPath
    archiveName = 'todo'
    destinationDir = 'build/zip'*/
    doLast {
        println 'Would zip mod now'
    }
}

copyModFiles {
    description = 'Copies non-compiled mod files to the output directory.'
    group = 'build'
}

buildMod {
    description = 'Builds the jar and assembles the mod folder.'
    group = 'build'
}

zipMod {
    description = 'UNIMPLEMENTED. ##Builds the mod and creates a zip archive ready for distribution.##'
    group = 'build'
}
