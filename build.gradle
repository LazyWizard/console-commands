import groovy.json.JsonSlurper

import java.nio.file.Paths

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

sourceCompatibility = 1.7
defaultTasks 'buildMod'

ext {
    Properties localProps = new Properties()
    localProps.load(new FileInputStream(file('local.properties'))) // See local.properties.example

    // Local build environment config, set in local.properties
    gameDir = localProps.getProperty('starsectorInstallDir')
    lazylibDir = localProps.getProperty('lazylibDir')
    outputPath = localProps.getProperty('outputPath')

    // Build number is passed in by the publish_dev.sh script for the WIP dev builds
    if (project.hasProperty('buildNumber')) modVersion = 'dev_build_' + buildNumber
    else modVersion = new JsonSlurper().parseText(file('src/main/mod/mod_info.json').text).version

    // JDK config, unnecessary if your JAVA_HOME environment variable is set
    // Need to test this on a new install; something seems broken with latest Kotlin compiler
    //compileJava.options.fork = true
    //compileJava.options.forkOptions.executable = Paths.get(localProps['jdkLocation'].toString(), 'bin', 'javac.exe')
    //compileKotlin.kotlinOptions.jdkHome = Paths.get(localProps['jdkLocation'].toString())
    //gradle.java.home = compileKotlin.kotlinOptions.jdkHome

    // Use Starsector's bundled JRE for bootstrap classpath (ensures compiling with newer JDKs won't cause issues)
    /*tasks.withType(JavaCompile) {
        options.bootstrapClasspath = files(gameDir + '/jre/lib/rt.jar')
    }*/
}

buildscript {
    ext.kotlin_version = '1.3.61' // Match the version used by the latest LazyLib
    ext.dokka_version = '1.4.0-rc'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "org.jetbrains.dokka:kotlin-as-java-plugin:${dokka_version}"
    }
}

repositories {
    mavenCentral()
    jcenter()
}

//  Please note: any dependencies marked 'compile' or 'runtime' will be included in the jar!
dependencies {
    compileOnly('org.jetbrains.kotlin:kotlin-stdlib') { transitive = false }
    compileOnly('org.jetbrains.kotlin:kotlin-stdlib-jdk7') { transitive = false }
    compileOnly fileTree(dir: gameDir, include: '*.jar', exclude: '*_obf.jar')
    compileOnly files(lazylibDir + '/jars/LazyLib.jar')
    compileOnly files(lazylibDir + '/jars/LazyLib-Kotlin.jar')
    //compileOnly fileTree(dir: lazylibDir + '/jars/', include: '*.jar')
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.6" // At the moment Kotlin only supports Java 6 or 8, and since Starsector ships with Java 7...
        noReflect = true
    }
}

jar {
    //from sourceSets.main.java
    from sourceSets.main.kotlin // Also includes Java
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } // Include source files in jar
    destinationDirectory = file(Paths.get(outputPath, 'jars/'))
    archiveFileName = 'lw_Console.jar'
}

dokkaJavadoc {
    outputDirectory = "docs"

    dokkaSourceSets {
        configureEach {
            platform = "JVM"
            includeNonPublic = false
            skipEmptyPackages = true
            reportUndocumented = true
            displayName = "Console Commands"
            moduleDisplayName = "Console Commands"
            includes = [ "src/main/kotlin/org/lazywizard/console/packages.md" ]
            jdkVersion = 7

            // Packages excluded from javadoc
            for (def subpackage : ['commands', 'rulecmd', 'ui', 'testing', 'ConsoleOverlay', 'ShowSettings']) {
                perPackageOption {
                    prefix = "org.lazywizard.console.$subpackage"
                    suppress = true
                }
            }
        }
    }
}

task printProps() {
    doLast {
        println 'Game directory: ' + gameDir
        println 'LazyLib directory: ' + lazylibDir
        println 'Output path: ' + outputPath
        println 'Mod version: ' + modVersion
    }
}

task copyModFiles(type: Copy) {
    from 'src/main/mod'
    into outputPath
}

task buildMod(dependsOn: [jar, copyModFiles]) {
    doLast {
        println "Mod folder created at \"${file(outputPath).absolutePath}\""
    }
}

task cleanDoc(type: Delete) {
    delete("docs/")
}

// Of course we can't just pass -notimestamp to Javadoc, because as we all know Dokka's a steaming pile
// TODO: Update timestamp stripping logic for Dokka 1.4+
task removeDocTimestamps(dependsOn: [dokkaJavadoc]) {
    doLast {
        FileTree docFiles = fileTree('docs/') {
            include '**/*.html'
        }
        print("Stripping documentation timestamps...")
        String regex = "(<!-- Generated by javadoc .+ -->\r?\n?)|(<meta name=\"date\" content=\".+\">\r?\n?)"
        docFiles.each { File docFile ->
            String content = docFile.getText()
            content = content.replaceAll(regex, "")
            docFile.setText(content)
        }
        println(" done!")
    }
}

task zipDoc(type: Zip, dependsOn: [cleanDoc, removeDocTimestamps]) {
    from("docs/")
    include '**/*'
    archiveFileName = 'javadoc.zip'
    destinationDirectory = file(outputPath)
}

task zipExample(type: Zip) {
    from('src/main/examplemod')
    into 'Example Mod-Added Commands'
    include '**/*'
    archiveFileName = 'Example Mod-Added Commands.zip'
    destinationDirectory = file(outputPath)
}

task zipMod(type: Zip, dependsOn: [clean, buildMod, zipDoc, zipExample]) {
    from(outputPath) { into 'Console Commands' }
    include '**/*'
    archiveFileName = "Console_Commands_${modVersion}.zip"
    def dest = file('build/zip/')
    destinationDirectory = dest
    doLast {
        println 'Mod zip placed in \"' + dest.absolutePath + '\"'
    }
}

buildMod.mustRunAfter(clean)
buildMod.mustRunAfter(zipDoc)
buildMod.mustRunAfter(zipExample)
dokkaJavadoc.finalizedBy removeDocTimestamps

copyModFiles {
    description = 'Copies non-compiled mod files to the output directory.'
    group = 'build'
}

buildMod {
    description = 'Builds the jar and assembles the mod folder.'
    group = 'build'
}

zipExample {
    description = 'Zips the example mod and adds its archive to the mod folder.'
    group = 'build'
}

zipMod {
    description = 'Builds the mod and creates a zip archive ready for distribution.'
    group = 'build'
}
